def get_all_k_meres(sample, k_mere_length)
	k_meres = Hash.new { |hash, key| hash[key] = 0 }
	(0..sample.length-k_mere_length).each do |sub_sample|
		k_meres[sample[sub_sample,k_mere_length]] = 1
	end
	return k_meres.keys
end

def get_k_mere_prob_score(k_mere, probs)
	score = 1.0
	k_mere.chars.each_with_index do |char, index|
		score *= probs[char][index]
	end
	return score
end

def get_k_mere_with_max_prob(dna, probs, k)
	best_k_mere = ""
	best_score = -9999999
	k_meres = get_all_k_meres(dna, k)
	k_meres.each do |k_mere|
		k_mere_score = get_k_mere_prob_score(k_mere, probs)
		if k_mere_score > best_score
			best_k_mere = k_mere
			best_score = k_mere_score
		end
	end
	return best_k_mere
end

def get_profile_with_pseudocounts(motifs)
	motif_length = motifs[0].length
	profile = Hash.new { |hash, key| hash[key] = []}

	motif_length.times do |position|
		profile_hash = {"A" => 0.0, "C"=>0.0, "G"=>0.0, "T" => 0.0}
		motifs.each { |current_motif| profile_hash[current_motif[position]] += 1.0 }
		profile_hash.keys.each do |key|
			profile[key] << (profile_hash[key]+1)/(motifs.length+4)
		end
	end
	return profile
end

def get_score(motifs)
	score = 0
	motifs[0].length.times do |position|
		str = ""
		motifs.each do |motif|
			str += motif[position]
		end
		max_column_score = str.chars.group_by(&:chr).map { |_, v| v.size }.max
		score += max_column_score
	end
	return (motifs[0].length * motifs.length - score)
end

def get_motifs_from_profile(profile, dnas, k)
	return dnas.map { |dna| get_k_mere_with_max_prob(dna, profile, k) }
end

def randomized_motif_search(dnas, k)
	random_motifs = []
	dnas.each do |dna|
		k_meres = get_all_k_meres(dna,k)
		random_motifs << k_meres[rand(k_meres.length)]
	end
	best_score = get_score(random_motifs)
	best_motifs = random_motifs
	while true
		profile = get_profile_with_pseudocounts(random_motifs)
		motifs = get_motifs_from_profile(profile, dnas, k)
		score = get_score(motifs)
		if score < best_score
			best_score = score
			best_motifs = motifs
		else
			return [best_score, best_motifs]
		end
	end
end

dnas= [
"CCGAGTCGATTTATAAGGCTAACTAGGATCGGACCGTTATTGTACGTGAGCTAGTCGGTGTGGGCGCTAGCCCTTTTTCCTCACAACCAGGATCAACCATTTTTCAATGTTCGGATGGAGGGGGCACCCGCGTCCACAGTCCCGATAAAAGTACGTCACTTATCTGCATCCGAGTCGATTTATA",
"AGGCTAACTAGGATCGGACCGTTATTGTACGACAACGCGTGTTTGTTGAGCTAGTCGGTGTGGGCGCTAGCCCTTTTTCCTCACAACCAGGATCAACCATTTTTCAATGTTCGGATGGAGGGGGCACCCGCGTCCACAGTCCCGATAAAAGTACGTCACTTATCTGCATCCGAGTCGATTTATA",
"CAGTTTGGTAGGCCGACTGACGAGTCGTTTACCACGTTGTGCAGCGACAGGAACAGTTTGTCCATGTCACATCACTCATTGTGGATCTCCTACACTACTCATAAGTTGCTCTCTTTACGTTAGAACCCGTCTACGTACGGGGAAACACCCGCGCTATTAGGCGCCGCTACTGCCCATTCGCACT",
"CCGGTTAGGCGTGGGTATTGGACAAACCCTTAGGCAATCAATTTACAACTGAGAAACTAGTCGACCCTCTTCCACAGGACGTGTGATTCCCGGTTCGGGTAATCTAAAGACGCAAGTATCGTGGGAAGAAATAGAGACCGTTAGGCACGGGACGGGCGACGCGAACTTTACTAATGCCCGGATG",
"CTGATGGCACACAGGACGTCGCTGTGCACCTCCCGATAATCCGCTCAGTTGTTACTTGCCAGCCACTCGGTACGCGCCACCCTGTAACAGGGGAGGGGATTCCGTTTCGACGTGAGATAGTTCCCCCTCTCCGTTCTGTATCTAATACGCCTGGAACCTACTCCAAAGTTTGTGTCCTAAACCT",
"ATTCTGTCACGTCCTCAATGGAGTCGGACGTGTTTGTAGCTATCGGCGAGACCAAATTAGGGGGTCTGCGGTCTCTCACACTCGGCATAGGCCATCCGAATCCAGGGTCTCTGTAAAAATCGGTCCGGTTTCTGAGGTCAAACGACTCCAAACGGTACAAAAGGCACACGGCCAGATCAAATAT",
"AGACGTCTGCCACAGTTACGCTAGTTCAGTATAGCACTCTTTTAGGCGATCACCATCAGTCACGTCTCCCTAGAAGGTGTTATTACTGCGAGTGGCGGCACTTCCCGTCACTTAACGTGTTTGTTCGGTGGTGCTGTCTTACCTAAGGCTAAGCGTGGTTGAGAACGTTGAGACATGTTGGTAG",
"CTTAGTGTTGCTGATTGGTTACGCTTGATAAGCGCGGTCAGTAAGGACATCGATTATGTATGCATTGGCTAGCTCTTTGGGACAGATGGTGTTTGTGGACGAGAAGATGGTGTCTTCGGAACAGGGACTTCTTGATGCGCATAAAAGCCACTGAGTGCCCGTTAAGTGTTGCCAGGACCGTAGC",
"CATTAAAATTGTTCATCGAGATGCCAGATAGCTTCATGGCTCAGCCACCCCAATACAGTTAGCAATGCATACTGACAGAGTAGTTTGACTTAGGTGGGGACAGGCGAAGAAAACAGGACGTGAGCGTAGAGTTGCTTGTAGAAGGCAATTCGGAACAATCATGCCTGGGCCACTAGATAGTATT",
"GATGTGGAAATCCGCATAGCGCCTCTTAGATGTACGCCATGTGACCCTCACAGGATCGTGTCTAGAGACCAATATACGCCTTCGTTTTAATGCTTTCAAGGCCGATTGGGTATTTTATGATTCGATAATACACACCGTGTTTGTCCTAATATAAGTCCACGTATGGCAATAAACGATGTTAGGT",
"ATGGCCCTGTGTAGAGCTCCCTAATAACATCGATCATCACAGCTGATCTCACCGTGAAAGGTGCGTAGAAGAAACCACTACTATTCGGTTCTCAAGGCCGTTGTTCCATCGCCACGGACAGGACGTGTTACCGCCCTTTATGACTCAGAGGGCCAAAAGTCCGATCCACAAACCGCCGTTCATG",
"AGTTTAGGTTTTAGAATAAGAGGACTGGATTCTAATCTCTTTGTTTGACATTCGGATCAATAGTGGGTCCCCACATCTTGCTTCGAATAGATGTACCCTTTTGGGGCGATTGGGTTTCGTGGGTTCGTTAAACGGAGTGCACAGGACCCCTTTGTGACTATGACATGTACCACCTTGAGAAACG",
"TGCAAGATTTGTATTTAAGGTAGACCGTAGCCAGGACGTGTTTAAAAGCATTGCTAATTCTGCCCCCCAATTCGCGGGCTAATCAAGCATTCCGTTGTCAGAACTACGAGCATGCCTGAATGGTTAACTCTTTCTGAATGCTCTGCACGTCGAATGCATCGCGTTCATCGAAAGGCGCCGACAA",
"TCACGGCCGAGGACGTGTTTGCAGGACTCAATCGTTATCGCCATCACTCAGCGGTACGCTTAGTTTGGACTGAACGAGCCTGTCATAGCTGAAGGGCAGGACCCATTATGCGGCGGGTGCTTAGTAATTAGAGGAAACTGACGCACAACATAATTAAAGGTCACTATAAGTTACTAGAGTGTAG",
"CACCGTGCATGGAATTGCTATTTGTCGGCCCCGGATTCTTGTATGGCGTGAAACTATCCGGTCTCCGCGTGAACAGTTAGTGTTTGTGGCATTATGCCAGGTAATATTTCCACAAATAGATTCTCTTTCACTCTGGCTTACTCGGGCACGGTGGTCGAGAAATAATACAGGGCTCTCTCTATGT",
"CAGTTATTTAACAACCGGAATTATCCCTGAATATAGTGGCTTTGACCCTAATGGATAACTAACTAAGATAAGGCTTACCTATGCTAATACGGCGAGTCCTCGCCAGTAGGGCAGGCGTCCTACACCACGGCACAGGTACTGTTTGTTTACACGGGAATCCCTCTGGGACATAGAATGAGTTATG",
"GGGACACGTTCCATTATGCCTAGGGGACCTCACATTGAGATGTGGCTAGCCCGGCTAACTAAGTTGAGTCGATTCCTCGCTCGTCGTAATGCGAGATTCTCGCTGGCGGCGACACACACAGGACGACGTTGTTGCGACCACATCGGTTTCCAGCTGGTACTCGTCGCAGGCTACATCATATCTA",
"GTCTTACAGCCAAAAAAATATGTAGACTGTCTATCGTTTACGTATAAGAAGCCCACAACTGGTCTCGGATTGGAAATTCTATTACAGGAAACGTTTGTCACTGCCACTAGGTCCATTGAGCGGGGTGCTTTTACGCATAGCCGTGCGTCAGTCCTCAGCCACCCTCTAAGAGTTCATTTAGGGG",
"GAGATATCAACATGGATCTAGTTGAGAGCACCAGGCTGATGACCAATGAGGAAGGTCCAACGAAAGCCTCGGTATTTCTCACTTTAGAGGCAAAGATCATTCCATCGTACTTGTGACAGTTTCATTCGACGTGTTTGTAGGTAGGGGCGGAATTGAATCTGAGATTATCGGTTGACTGGATGCA",
"AACCCAATTGTGACCCTAGGAAGAACTTGGACATGACTCGTTCCGACGGTAGTTGGGACACTCTCCGTTCAGACCTGGTAGAGCCCGACCTCGTTCTTGCAGATGACAAGGAAGTGCAATAAAACAAAGTATTGGTCGCGCCGCCTAACAGGCGTTGTTTGTCCTCAGCAACGTTTAATTCGCT"
]

best_score = 999999
best_motifs = []

1000.times do |iteration|
	puts iteration if iteration % 100 == 0
	result = randomized_motif_search(dnas,15)

	if result[0] < best_score
		best_score = result[0]
		best_motifs = result[1]
	end
end

puts best_motifs