def get_all_k_meres(sample, k_mere_length)
	k_meres = Hash.new { |hash, key| hash[key] = 0 }
	(0..sample.length-k_mere_length).each do |sub_sample|
		k_meres[sample[sub_sample,k_mere_length]] = 1
	end
	return k_meres.keys
end

def get_probability(probability)
	prog_hash = {}

	prog_hash["A"] = probability[0].split(" ").map(&:to_f)
	prog_hash["C"] = probability[1].split(" ").map(&:to_f)
	prog_hash["G"] = probability[2].split(" ").map(&:to_f)
	prog_hash["T"] = probability[3].split(" ").map(&:to_f)

	return prog_hash
end

def get_k_mere_prob_score(k_mere, probs)
	score = 1.0
	k_mere.chars.each_with_index do |char, index|
		score *= probs[char][index]
	end
	return score
end

def get_k_mere_with_max_prob(dna, probs, k)
	best_k_mere = ""
	best_score = -9999999
	k_meres = get_all_k_meres(dna, k)
	k_meres.each do |k_mere|
		k_mere_score = get_k_mere_prob_score(k_mere, probs)
		if k_mere_score > best_score
			best_k_mere = k_mere
			best_score = k_mere_score
		end
	end
	return best_k_mere
end

probs = [
"0.183 0.282 0.099 0.211 0.197 0.225 0.211 0.254 0.211 0.239 0.225 0.239 0.113 0.324",
"0.31 0.169 0.31 0.239 0.211 0.268 0.31 0.239 0.225 0.38 0.324 0.197 0.254 0.239",
"0.225 0.225 0.324 0.239 0.225 0.282 0.254 0.296 0.282 0.183 0.282 0.268 0.352 0.225",
"0.282 0.324 0.268 0.31 0.366 0.225 0.225 0.211 0.282 0.197 0.169 0.296 0.282 0.211"
]

puts get_k_mere_with_max_prob("CGGGTACGAAATCAGTCACAATGGCTCGCTCTTTCAGTAAACGGCATGCGCAGATGGCATATTGACGGGAGCGACTGGCGGAGTGCCCAAAAATTGTCAGAGGTGGATGACGCCCTATCGAAATCCAGCGGGAGTTTATCGGGTGGCAGTCAAGTGGCACCCGTACATTAATCACACTGATTGTTGACGATGAAGTCAGTCGGAAGAGACTCTCAAGGTCGTTGTCCAACCAGCGTTGGGATCATAGTATGGTAACATGCCGGTCTCCGGCCATGGTGACCTCCCAAGCCGCTGGTGACGAGCTGCGTCTCGGTGTGTGCATCTTACGCATCGATGACAGTACTACAGGTTGACTACTTCGCGAAATAAGATATAGTTGTCTGAGAGCTCGTGCATTAACACTTGTTTCGCTGCTCGGGCTGGCGGCCAGTGTTCCGTAGTTGGTGCAACAGCTTGGGTTTTCTTCGTGATTAAATATGTACCATAAATACGTGGTTGTCTAAACACACGAACTTACGATATGTGCCCAGACTACCGAAGTATCGTTCAGACCACAGTCCCTCACTCTCCGCGACTATCTGCGCCAGAGTTACTTAATCGCAATCGCAATGTGCCGCACTTGCCTAACGACAATTCAGTCATTCAAGGAGTGTTCGATTGACAACCTGCTGGTAGTCAGAAGCGGCCATTGATTCCCCGAGTAACAAGTACTAGATGCCGGAGTAATTGGATGGGAACTAGGAGGCAGTGCTCCCTGATGGTTCCATTTCCCTTGTTTGCGCACCCGCGTACGTAAATGAACATGCTTGCCATTACCTACGCAGTCGGTGGGTCTAGGTTCCGCGTCCATGCTACTCTAAGCGTCGAGAAAGCCAGCCGTTACTCTTAAGAACTTGGTTCCGTAGATGGTATTCAAGGTATGTGACGGGGTCGATGTAGCGCACGCTGGTGTTGAGGCCCGCCAACTAACGGATACCGTTCTACAAGAGGTGCACCCGGT", get_probability(probs), 14)